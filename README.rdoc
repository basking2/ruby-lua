= ruby-lua

Call Lua from Ruby (and Ruby from Lua in Ruby)

Language::Lua - Lua interpretor for Ruby 

= SYNOPSIS

  require 'language/lua'
  lua = Language::Lua.new()
  lua.eval( "script.lua" )
  # same as
  lua.dofile( "script.lua" ) 
  
  out = lua.my_lua_function( ... )
  print out;
  # same as 
  out = lua.call( "my_lua_function", ... )
  print out;

= METHODS

Language::Lua.new()
    Create Ã  new Lua interpretor
    
Language::Lua.load( file )
Language::Lua.dofile( file )
    Load a Lua Script

Language::Lua.<lua_function>( ... )
    Call the Lua function named <lua_function>

Language::Lua.call( [true|false], "<lua_function>", ... )
    Call the Lua function named <lua_function>. 
    If first argument is true, the function result is not poped from the Lua Stack

Language::Lua.var( [true|false], "<lua_varname>", [<value>] )
    Return the <lua_varname> value or set the <lua_varname> if <value> is given.

Language::Lua.eval( "lua_code" )
    Evaluate the lua_code

ruby( "<ruby_function>", ... )
    In your Lua code, call <ruby_function>.


== Contributing to ruby-lua
 
* Check out the latest master to make sure the feature hasn't been implemented or the bug hasn't been fixed yet
* Check out the issue tracker to make sure someone already hasn't requested it and/or contributed it
* Fork the project
* Start a feature/bugfix branch
* Commit and push until you are happy with your contribution
* Make sure to add tests for it. This is important so I don't break it in a future version unintentionally.
* Please try not to mess with the Rakefile, version, or history. If you want to have your own version, or is otherwise necessary, that is fine, but please isolate to its own commit so I can cherry-pick around it.

== Copyright

Copyright (c) 2010 Gregoire Lejeune. See LICENSE.txt for
further details.

